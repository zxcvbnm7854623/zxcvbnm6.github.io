{"ast":null,"code":"import { defineComponent, inject, ref, getCurrentInstance, provide, watch, nextTick, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, withModifiers, createElementVNode, normalizeStyle, createBlock, withCtx, resolveDynamicComponent, createCommentVNode, createVNode, Fragment, renderList, vShow } from 'vue';\nimport { ElCollapseTransition } from '../../collapse-transition/index.mjs';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Loading, CaretRight } from '@element-plus/icons-vue';\nimport NodeContent from './tree-node-content.mjs';\nimport { getNodeKey, handleCurrentChange } from './model/util.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { dragEventsKey } from './model/useDragNode.mjs';\nimport Node from './model/node.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isFunction, isString } from '@vue/shared';\nconst _sfc_main = defineComponent({\n  name: \"ElTreeNode\",\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({})\n    },\n    props: {\n      type: Object,\n      default: () => ({})\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"node-expand\"],\n  setup(props, ctx) {\n    const ns = useNamespace(\"tree\");\n    const {\n      broadcastExpanded\n    } = useNodeExpandEventBroadcast(props);\n    const tree = inject(\"RootTree\");\n    const expanded = ref(false);\n    const childNodeRendered = ref(false);\n    const oldChecked = ref(null);\n    const oldIndeterminate = ref(null);\n    const node$ = ref(null);\n    const dragEvents = inject(dragEventsKey);\n    const instance = getCurrentInstance();\n    provide(\"NodeInstance\", instance);\n    if (!tree) {\n      debugWarn(\"Tree\", \"Can not find node's tree.\");\n    }\n    if (props.node.expanded) {\n      expanded.value = true;\n      childNodeRendered.value = true;\n    }\n    const childrenKey = tree.props.props[\"children\"] || \"children\";\n    watch(() => {\n      const children = props.node.data[childrenKey];\n      return children && [...children];\n    }, () => {\n      props.node.updateChildren();\n    });\n    watch(() => props.node.indeterminate, val => {\n      handleSelectChange(props.node.checked, val);\n    });\n    watch(() => props.node.checked, val => {\n      handleSelectChange(val, props.node.indeterminate);\n    });\n    watch(() => props.node.childNodes.length, () => props.node.reInitChecked());\n    watch(() => props.node.expanded, val => {\n      nextTick(() => expanded.value = val);\n      if (val) {\n        childNodeRendered.value = true;\n      }\n    });\n    const getNodeKey$1 = node => {\n      return getNodeKey(tree.props.nodeKey, node.data);\n    };\n    const getNodeClass = node => {\n      const nodeClassFunc = props.props.class;\n      if (!nodeClassFunc) {\n        return {};\n      }\n      let className;\n      if (isFunction(nodeClassFunc)) {\n        const {\n          data\n        } = node;\n        className = nodeClassFunc(data, node);\n      } else {\n        className = nodeClassFunc;\n      }\n      if (isString(className)) {\n        return {\n          [className]: true\n        };\n      } else {\n        return className;\n      }\n    };\n    const handleSelectChange = (checked, indeterminate) => {\n      if (oldChecked.value !== checked || oldIndeterminate.value !== indeterminate) {\n        tree.ctx.emit(\"check-change\", props.node.data, checked, indeterminate);\n      }\n      oldChecked.value = checked;\n      oldIndeterminate.value = indeterminate;\n    };\n    const handleClick = e => {\n      handleCurrentChange(tree.store, tree.ctx.emit, () => {\n        var _a;\n        const nodeKeyProp = (_a = tree == null ? void 0 : tree.props) == null ? void 0 : _a.nodeKey;\n        if (nodeKeyProp) {\n          const curNodeKey = getNodeKey$1(props.node);\n          tree.store.value.setCurrentNodeKey(curNodeKey);\n        } else {\n          tree.store.value.setCurrentNode(props.node);\n        }\n      });\n      tree.currentNode.value = props.node;\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick();\n      }\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: {\n            checked: !props.node.checked\n          }\n        });\n      }\n      tree.ctx.emit(\"node-click\", props.node.data, props.node, instance, e);\n    };\n    const handleContextMenu = event => {\n      if (tree.instance.vnode.props[\"onNodeContextmenu\"]) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n      tree.ctx.emit(\"node-contextmenu\", event, props.node.data, props.node, instance);\n    };\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return;\n      if (expanded.value) {\n        tree.ctx.emit(\"node-collapse\", props.node.data, props.node, instance);\n        props.node.collapse();\n      } else {\n        props.node.expand(() => {\n          ctx.emit(\"node-expand\", props.node.data, props.node, instance);\n        });\n      }\n    };\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly);\n      nextTick(() => {\n        const store = tree.store.value;\n        tree.ctx.emit(\"check\", props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys()\n        });\n      });\n    };\n    const handleChildNodeExpand = (nodeData, node, instance2) => {\n      broadcastExpanded(node);\n      tree.ctx.emit(\"node-expand\", nodeData, node, instance2);\n    };\n    const handleDragStart = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragStart({\n        event,\n        treeNode: props\n      });\n    };\n    const handleDragOver = event => {\n      event.preventDefault();\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: {\n          $el: node$.value,\n          node: props.node\n        }\n      });\n    };\n    const handleDrop = event => {\n      event.preventDefault();\n    };\n    const handleDragEnd = event => {\n      if (!tree.props.draggable) return;\n      dragEvents.treeNodeDragEnd(event);\n    };\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey: getNodeKey$1,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight\n    };\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_icon = resolveComponent(\"el-icon\");\n  const _component_el_checkbox = resolveComponent(\"el-checkbox\");\n  const _component_loading = resolveComponent(\"loading\");\n  const _component_node_content = resolveComponent(\"node-content\");\n  const _component_el_tree_node = resolveComponent(\"el-tree-node\");\n  const _component_el_collapse_transition = resolveComponent(\"el-collapse-transition\");\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    ref: \"node$\",\n    class: normalizeClass([_ctx.ns.b(\"node\"), _ctx.ns.is(\"expanded\", _ctx.expanded), _ctx.ns.is(\"current\", _ctx.node.isCurrent), _ctx.ns.is(\"hidden\", !_ctx.node.visible), _ctx.ns.is(\"focusable\", !_ctx.node.disabled), _ctx.ns.is(\"checked\", !_ctx.node.disabled && _ctx.node.checked), _ctx.getNodeClass(_ctx.node)]),\n    role: \"treeitem\",\n    tabindex: \"-1\",\n    \"aria-expanded\": _ctx.expanded,\n    \"aria-disabled\": _ctx.node.disabled,\n    \"aria-checked\": _ctx.node.checked,\n    draggable: _ctx.tree.props.draggable,\n    \"data-key\": _ctx.getNodeKey(_ctx.node),\n    onClick: withModifiers(_ctx.handleClick, [\"stop\"]),\n    onContextmenu: _ctx.handleContextMenu,\n    onDragstart: withModifiers(_ctx.handleDragStart, [\"stop\"]),\n    onDragover: withModifiers(_ctx.handleDragOver, [\"stop\"]),\n    onDragend: withModifiers(_ctx.handleDragEnd, [\"stop\"]),\n    onDrop: withModifiers(_ctx.handleDrop, [\"stop\"])\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.be(\"node\", \"content\")),\n    style: normalizeStyle({\n      paddingLeft: (_ctx.node.level - 1) * _ctx.tree.props.indent + \"px\"\n    })\n  }, [_ctx.tree.props.icon || _ctx.CaretRight ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"expand-icon\"), _ctx.ns.is(\"leaf\", _ctx.node.isLeaf), {\n      expanded: !_ctx.node.isLeaf && _ctx.expanded\n    }]),\n    onClick: withModifiers(_ctx.handleExpandIconClick, [\"stop\"])\n  }, {\n    default: withCtx(() => [(openBlock(), createBlock(resolveDynamicComponent(_ctx.tree.props.icon || _ctx.CaretRight)))]),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showCheckbox ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 1,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: !!_ctx.node.disabled,\n    onClick: withModifiers(() => {}, [\"stop\"]),\n    onChange: _ctx.handleCheckChange\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onClick\", \"onChange\"])) : createCommentVNode(\"v-if\", true), _ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.ns.be(\"node\", \"loading-icon\"), _ctx.ns.is(\"loading\")])\n  }, {\n    default: withCtx(() => [createVNode(_component_loading)]),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createVNode(_component_node_content, {\n    node: _ctx.node,\n    \"render-content\": _ctx.renderContent\n  }, null, 8, [\"node\", \"render-content\"])], 6), createVNode(_component_el_collapse_transition, null, {\n    default: withCtx(() => [!_ctx.renderAfterExpand || _ctx.childNodeRendered ? withDirectives((openBlock(), createElementBlock(\"div\", {\n      key: 0,\n      class: normalizeClass(_ctx.ns.be(\"node\", \"children\")),\n      role: \"group\",\n      \"aria-expanded\": _ctx.expanded\n    }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.node.childNodes, child => {\n      return openBlock(), createBlock(_component_el_tree_node, {\n        key: _ctx.getNodeKey(child),\n        \"render-content\": _ctx.renderContent,\n        \"render-after-expand\": _ctx.renderAfterExpand,\n        \"show-checkbox\": _ctx.showCheckbox,\n        node: child,\n        accordion: _ctx.accordion,\n        props: _ctx.props,\n        onNodeExpand: _ctx.handleChildNodeExpand\n      }, null, 8, [\"render-content\", \"render-after-expand\", \"show-checkbox\", \"node\", \"accordion\", \"props\", \"onNodeExpand\"]);\n    }), 128))], 10, [\"aria-expanded\"])), [[vShow, _ctx.expanded]]) : createCommentVNode(\"v-if\", true)]),\n    _: 1\n  })], 42, [\"aria-expanded\", \"aria-disabled\", \"aria-checked\", \"draggable\", \"data-key\", \"onClick\", \"onContextmenu\", \"onDragstart\", \"onDragover\", \"onDragend\", \"onDrop\"])), [[vShow, _ctx.node.visible]]);\n}\nvar ElTreeNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"tree-node.vue\"]]);\nexport { ElTreeNode as default };","map":{"version":3,"names":["_sfc_main","defineComponent","name","components","ElCollapseTransition","ElCheckbox","NodeContent","ElIcon","Loading","props","node","type","Node","default","Object","accordion","Boolean","renderContent","Function","renderAfterExpand","showCheckbox","emits","setup","ctx","ns","useNamespace","broadcastExpanded","useNodeExpandEventBroadcast","tree","inject","expanded","ref","childNodeRendered","oldChecked","oldIndeterminate","node$","dragEvents","dragEventsKey","instance","getCurrentInstance","provide","debugWarn","value","childrenKey","watch","children","data","updateChildren","indeterminate","val","handleSelectChange","checked","childNodes","length","reInitChecked","nextTick","getNodeKey$1","getNodeKey","nodeKey","getNodeClass","nodeClassFunc","class","className","isFunction","isString","emit","handleClick","e","handleCurrentChange","store","_a","nodeKeyProp","curNodeKey","setCurrentNodeKey","setCurrentNode","currentNode","expandOnClickNode","handleExpandIconClick","checkOnClickNode","disabled","handleCheckChange","target","handleContextMenu","event","vnode","stopPropagation","preventDefault","isLeaf","collapse","expand","ev","setChecked","checkStrictly","checkedNodes","getCheckedNodes","checkedKeys","getCheckedKeys","halfCheckedNodes","getHalfCheckedNodes","halfCheckedKeys","getHalfCheckedKeys","handleChildNodeExpand","nodeData","instance2","handleDragStart","draggable","treeNodeDragStart","treeNode","handleDragOver","treeNodeDragOver","$el","handleDrop","handleDragEnd","treeNodeDragEnd","CaretRight","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_el_icon","resolveComponent","_component_el_checkbox","_component_loading","_component_node_content","_component_el_tree_node","_component_el_collapse_transition","withDirectives","openBlock","createElementBlock","normalizeClass","b","is","isCurrent","visible","onClick","withModifiers","onContextmenu","onDragstart","onDragover","onDragend","onDrop","createElementVNode","be","style","normalizeStyle","paddingLeft","level","indent","icon","createBlock","key","withCtx","resolveDynamicComponent","_","createCommentVNode","onChange","loading","createVNode","role","Fragment","renderList","child","onNodeExpand","vShow","ElTreeNode","_export_sfc"],"sources":["../../../../../../packages/components/tree/src/tree-node.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"node.visible\"\n    ref=\"node$\"\n    :class=\"[\n      ns.b('node'),\n      ns.is('expanded', expanded),\n      ns.is('current', node.isCurrent),\n      ns.is('hidden', !node.visible),\n      ns.is('focusable', !node.disabled),\n      ns.is('checked', !node.disabled && node.checked),\n      getNodeClass(node),\n    ]\"\n    role=\"treeitem\"\n    tabindex=\"-1\"\n    :aria-expanded=\"expanded\"\n    :aria-disabled=\"node.disabled\"\n    :aria-checked=\"node.checked\"\n    :draggable=\"tree.props.draggable\"\n    :data-key=\"getNodeKey(node)\"\n    @click.stop=\"handleClick\"\n    @contextmenu=\"handleContextMenu\"\n    @dragstart.stop=\"handleDragStart\"\n    @dragover.stop=\"handleDragOver\"\n    @dragend.stop=\"handleDragEnd\"\n    @drop.stop=\"handleDrop\"\n  >\n    <div\n      :class=\"ns.be('node', 'content')\"\n      :style=\"{ paddingLeft: (node.level - 1) * tree.props.indent + 'px' }\"\n    >\n      <el-icon\n        v-if=\"tree.props.icon || CaretRight\"\n        :class=\"[\n          ns.be('node', 'expand-icon'),\n          ns.is('leaf', node.isLeaf),\n          {\n            expanded: !node.isLeaf && expanded,\n          },\n        ]\"\n        @click.stop=\"handleExpandIconClick\"\n      >\n        <component :is=\"tree.props.icon || CaretRight\" />\n      </el-icon>\n      <el-checkbox\n        v-if=\"showCheckbox\"\n        :model-value=\"node.checked\"\n        :indeterminate=\"node.indeterminate\"\n        :disabled=\"!!node.disabled\"\n        @click.stop\n        @change=\"handleCheckChange\"\n      />\n      <el-icon\n        v-if=\"node.loading\"\n        :class=\"[ns.be('node', 'loading-icon'), ns.is('loading')]\"\n      >\n        <loading />\n      </el-icon>\n      <node-content :node=\"node\" :render-content=\"renderContent\" />\n    </div>\n    <el-collapse-transition>\n      <div\n        v-if=\"!renderAfterExpand || childNodeRendered\"\n        v-show=\"expanded\"\n        :class=\"ns.be('node', 'children')\"\n        role=\"group\"\n        :aria-expanded=\"expanded\"\n      >\n        <el-tree-node\n          v-for=\"child in node.childNodes\"\n          :key=\"getNodeKey(child)\"\n          :render-content=\"renderContent\"\n          :render-after-expand=\"renderAfterExpand\"\n          :show-checkbox=\"showCheckbox\"\n          :node=\"child\"\n          :accordion=\"accordion\"\n          :props=\"props\"\n          @node-expand=\"handleChildNodeExpand\"\n        />\n      </div>\n    </el-collapse-transition>\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  inject,\n  nextTick,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { debugWarn, isFunction, isString } from '@element-plus/utils'\nimport ElCollapseTransition from '@element-plus/components/collapse-transition'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CaretRight, Loading } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport NodeContent from './tree-node-content.vue'\nimport { getNodeKey as getNodeKeyUtil, handleCurrentChange } from './model/util'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { dragEventsKey } from './model/useDragNode'\nimport Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type { RootTreeType, TreeNodeData, TreeOptionProps } from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTreeNode',\n  components: {\n    ElCollapseTransition,\n    ElCheckbox,\n    NodeContent,\n    ElIcon,\n    Loading,\n  },\n  props: {\n    node: {\n      type: Node,\n      default: () => ({}),\n    },\n    props: {\n      type: Object as PropType<TreeOptionProps>,\n      default: () => ({}),\n    },\n    accordion: Boolean,\n    renderContent: Function,\n    renderAfterExpand: Boolean,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['node-expand'],\n  setup(props, ctx) {\n    const ns = useNamespace('tree')\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n    const tree = inject<RootTreeType>('RootTree')\n    const expanded = ref(false)\n    const childNodeRendered = ref(false)\n    const oldChecked = ref<boolean>(null)\n    const oldIndeterminate = ref<boolean>(null)\n    const node$ = ref<Nullable<HTMLElement>>(null)\n    const dragEvents = inject(dragEventsKey)\n    const instance = getCurrentInstance()\n\n    provide('NodeInstance', instance)\n    if (!tree) {\n      debugWarn('Tree', \"Can not find node's tree.\")\n    }\n\n    if (props.node.expanded) {\n      expanded.value = true\n      childNodeRendered.value = true\n    }\n\n    const childrenKey = tree.props.props['children'] || 'children'\n    watch(\n      () => {\n        const children = props.node.data[childrenKey]\n        return children && [...children]\n      },\n      () => {\n        props.node.updateChildren()\n      }\n    )\n\n    watch(\n      () => props.node.indeterminate,\n      (val) => {\n        handleSelectChange(props.node.checked, val)\n      }\n    )\n\n    watch(\n      () => props.node.checked,\n      (val) => {\n        handleSelectChange(val, props.node.indeterminate)\n      }\n    )\n\n    watch(\n      () => props.node.childNodes.length,\n      () => props.node.reInitChecked()\n    )\n\n    watch(\n      () => props.node.expanded,\n      (val) => {\n        nextTick(() => (expanded.value = val))\n        if (val) {\n          childNodeRendered.value = true\n        }\n      }\n    )\n\n    const getNodeKey = (node: Node): any => {\n      return getNodeKeyUtil(tree.props.nodeKey, node.data)\n    }\n\n    const getNodeClass = (node: Node) => {\n      const nodeClassFunc = props.props.class\n      if (!nodeClassFunc) {\n        return {}\n      }\n      let className\n      if (isFunction(nodeClassFunc)) {\n        const { data } = node\n        className = nodeClassFunc(data, node)\n      } else {\n        className = nodeClassFunc\n      }\n\n      if (isString(className)) {\n        return { [className]: true }\n      } else {\n        return className\n      }\n    }\n\n    const handleSelectChange = (checked: boolean, indeterminate: boolean) => {\n      if (\n        oldChecked.value !== checked ||\n        oldIndeterminate.value !== indeterminate\n      ) {\n        tree.ctx.emit('check-change', props.node.data, checked, indeterminate)\n      }\n      oldChecked.value = checked\n      oldIndeterminate.value = indeterminate\n    }\n\n    const handleClick = (e: MouseEvent) => {\n      handleCurrentChange(tree.store, tree.ctx.emit, () => {\n        const nodeKeyProp = tree?.props?.nodeKey\n        if (nodeKeyProp) {\n          const curNodeKey = getNodeKey(props.node)\n          tree.store.value.setCurrentNodeKey(curNodeKey)\n        } else {\n          tree.store.value.setCurrentNode(props.node)\n        }\n      })\n      tree.currentNode.value = props.node\n\n      if (tree.props.expandOnClickNode) {\n        handleExpandIconClick()\n      }\n\n      if (tree.props.checkOnClickNode && !props.node.disabled) {\n        handleCheckChange(null, {\n          target: { checked: !props.node.checked },\n        })\n      }\n      tree.ctx.emit('node-click', props.node.data, props.node, instance, e)\n    }\n\n    const handleContextMenu = (event: Event) => {\n      if (tree.instance.vnode.props['onNodeContextmenu']) {\n        event.stopPropagation()\n        event.preventDefault()\n      }\n      tree.ctx.emit(\n        'node-contextmenu',\n        event,\n        props.node.data,\n        props.node,\n        instance\n      )\n    }\n\n    const handleExpandIconClick = () => {\n      if (props.node.isLeaf) return\n      if (expanded.value) {\n        tree.ctx.emit('node-collapse', props.node.data, props.node, instance)\n        props.node.collapse()\n      } else {\n        props.node.expand(() => {\n          ctx.emit('node-expand', props.node.data, props.node, instance)\n        })\n      }\n    }\n\n    const handleCheckChange = (value, ev) => {\n      props.node.setChecked(ev.target.checked, !tree.props.checkStrictly)\n      nextTick(() => {\n        const store = tree.store.value\n        tree.ctx.emit('check', props.node.data, {\n          checkedNodes: store.getCheckedNodes(),\n          checkedKeys: store.getCheckedKeys(),\n          halfCheckedNodes: store.getHalfCheckedNodes(),\n          halfCheckedKeys: store.getHalfCheckedKeys(),\n        })\n      })\n    }\n\n    const handleChildNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      tree.ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const handleDragStart = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragStart({ event, treeNode: props })\n    }\n\n    const handleDragOver = (event: DragEvent) => {\n      event.preventDefault()\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragOver({\n        event,\n        treeNode: { $el: node$.value, node: props.node },\n      })\n    }\n\n    const handleDrop = (event: DragEvent) => {\n      event.preventDefault()\n    }\n\n    const handleDragEnd = (event: DragEvent) => {\n      if (!tree.props.draggable) return\n      dragEvents.treeNodeDragEnd(event)\n    }\n\n    return {\n      ns,\n      node$,\n      tree,\n      expanded,\n      childNodeRendered,\n      oldChecked,\n      oldIndeterminate,\n      getNodeKey,\n      getNodeClass,\n      handleSelectChange,\n      handleClick,\n      handleContextMenu,\n      handleExpandIconClick,\n      handleCheckChange,\n      handleChildNodeExpand,\n      handleDragStart,\n      handleDragOver,\n      handleDrop,\n      handleDragEnd,\n      CaretRight,\n    }\n  },\n})\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}