{"ast":null,"code":"import { defineComponent, inject, provide, unref, createVNode, ref, computed } from 'vue';\nimport { TableV2InjectionKey } from './tokens.mjs';\nimport { tableV2GridProps } from './grid.mjs';\nimport { sum } from './utils.mjs';\nimport Header from './components/header.mjs';\nimport DynamicSizeGrid from '../../virtual-list/src/components/dynamic-size-grid.mjs';\nimport FixedSizeGrid from '../../virtual-list/src/components/fixed-size-grid.mjs';\nimport { isObject } from '@vue/shared';\nimport { isNumber } from '../../../utils/types.mjs';\nconst COMPONENT_NAME = \"ElTableV2Grid\";\nconst useTableGrid = props => {\n  const headerRef = ref();\n  const bodyRef = ref();\n  const scrollLeft = ref(0);\n  const totalHeight = computed(() => {\n    const {\n      data,\n      rowHeight,\n      estimatedRowHeight\n    } = props;\n    if (estimatedRowHeight) {\n      return;\n    }\n    return data.length * rowHeight;\n  });\n  const fixedRowHeight = computed(() => {\n    const {\n      fixedData,\n      rowHeight\n    } = props;\n    return ((fixedData == null ? void 0 : fixedData.length) || 0) * rowHeight;\n  });\n  const headerHeight = computed(() => sum(props.headerHeight));\n  const gridHeight = computed(() => {\n    const {\n      height\n    } = props;\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight));\n  });\n  const hasHeader = computed(() => {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0;\n  });\n  const itemKey = ({\n    data,\n    rowIndex\n  }) => data[rowIndex][props.rowKey];\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd\n  }) {\n    var _a;\n    (_a = props.onRowsRendered) == null ? void 0 : _a.call(props, {\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd\n    });\n  }\n  function resetAfterRowIndex(index, forceUpdate2) {\n    var _a;\n    (_a = bodyRef.value) == null ? void 0 : _a.resetAfterRowIndex(index, forceUpdate2);\n  }\n  function scrollTo(leftOrOptions, top) {\n    const header$ = unref(headerRef);\n    const body$ = unref(bodyRef);\n    if (isObject(leftOrOptions)) {\n      header$ == null ? void 0 : header$.scrollToLeft(leftOrOptions.scrollLeft);\n      scrollLeft.value = leftOrOptions.scrollLeft;\n      body$ == null ? void 0 : body$.scrollTo(leftOrOptions);\n    } else {\n      header$ == null ? void 0 : header$.scrollToLeft(leftOrOptions);\n      scrollLeft.value = leftOrOptions;\n      body$ == null ? void 0 : body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top\n      });\n    }\n  }\n  function scrollToTop(scrollTop) {\n    var _a;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.scrollTo({\n      scrollTop\n    });\n  }\n  function scrollToRow(row, strategy) {\n    var _a;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.scrollToItem(row, 1, strategy);\n  }\n  function forceUpdate() {\n    var _a, _b;\n    (_a = unref(bodyRef)) == null ? void 0 : _a.$forceUpdate();\n    (_b = unref(headerRef)) == null ? void 0 : _b.$forceUpdate();\n  }\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow,\n    scrollLeft\n  };\n};\nconst TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup(props, {\n    slots,\n    expose\n  }) {\n    const {\n      ns\n    } = inject(TableV2InjectionKey);\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n      scrollLeft\n    } = useTableGrid(props);\n    provide(\"tableV2GridScrollLeft\", scrollLeft);\n    expose({\n      forceUpdate,\n      totalHeight,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n      resetAfterRowIndex\n    });\n    const getColumnWidth = () => props.bodyWidth;\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n        getRowHeight,\n        onScroll\n      } = props;\n      const isDynamicRowEnabled = isNumber(estimatedRowHeight);\n      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid;\n      const _headerHeight = unref(headerHeight);\n      return createVNode(\"div\", {\n        \"role\": \"table\",\n        \"class\": [ns.e(\"table\"), props.class],\n        \"style\": style\n      }, [createVNode(Grid, {\n        \"ref\": bodyRef,\n        \"data\": data,\n        \"useIsScrolling\": useIsScrolling,\n        \"itemKey\": itemKey,\n        \"columnCache\": 0,\n        \"columnWidth\": isDynamicRowEnabled ? getColumnWidth : bodyWidth,\n        \"totalColumn\": 1,\n        \"totalRow\": data.length,\n        \"rowCache\": cache,\n        \"rowHeight\": isDynamicRowEnabled ? getRowHeight : rowHeight,\n        \"width\": width,\n        \"height\": unref(gridHeight),\n        \"class\": ns.e(\"body\"),\n        \"role\": \"rowgroup\",\n        \"scrollbarStartGap\": scrollbarStartGap,\n        \"scrollbarEndGap\": scrollbarEndGap,\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"onScroll\": onScroll,\n        \"onItemRendered\": onItemRendered,\n        \"perfMode\": false\n      }, {\n        default: params => {\n          var _a;\n          const rowData = data[params.rowIndex];\n          return (_a = slots.row) == null ? void 0 : _a.call(slots, {\n            ...params,\n            columns,\n            rowData\n          });\n        }\n      }), unref(hasHeader) && createVNode(Header, {\n        \"ref\": headerRef,\n        \"class\": ns.e(\"header-wrapper\"),\n        \"columns\": columns,\n        \"headerData\": data,\n        \"headerHeight\": props.headerHeight,\n        \"fixedHeaderData\": fixedData,\n        \"rowWidth\": headerWidth,\n        \"rowHeight\": rowHeight,\n        \"width\": width,\n        \"height\": Math.min(_headerHeight + unref(fixedRowHeight), height)\n      }, {\n        dynamic: slots.header,\n        fixed: slots.row\n      })]);\n    };\n  }\n});\nvar Table = TableGrid;\nexport { Table as default };","map":{"version":3,"names":["COMPONENT_NAME","headerRef","ref","bodyRef","scrollLeft","totalHeight","computed","data","rowHeight","estimatedRowHeight","props","length","fixedData","headerHeight","sum","gridHeight","height","Math","max","unref","fixedRowHeight","hasHeader","itemKey","rowIndex","onItemRendered","rowCacheStart","rowCacheEnd","rowVisibleStart","_a","onRowsRendered","call","rowVisibleEnd","resetAfterRowIndex","index","forceUpdate2","value","header$","body$","isObject","leftOrOptions","scrollTo","scrollTop","top","scrollToTop","scrollToItem","row","strategy","forceUpdate","_b","$forceUpdate","scrollToRow","TableGrid","defineComponent","tableV2GridProps","setup","slots","expose","ns","inject","TableV2InjectionKey","useTableGrid","getColumnWidth","provide","bodyWidth","columns","useIsScrolling","scrollbarEndGap","scrollbarStartGap","style","headerWidth","width","onScroll","isDynamicRowEnabled","isNumber","Grid","DynamicSizeGrid","FixedSizeGrid","_headerHeight","createVNode","e","class","cache","getRowHeight","scrollbarAlwaysOn","default","params","rowData","Header","min","dynamic","header","fixed","Table"],"sources":["../../../../../../packages/components/table-v2/src/table-grid.tsx"],"sourcesContent":["import { computed, defineComponent, inject, provide, ref, unref } from 'vue'\nimport {\n  DynamicSizeGrid,\n  FixedSizeGrid,\n} from '@element-plus/components/virtual-list'\nimport { isNumber, isObject } from '@element-plus/utils'\nimport { Header } from './components'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2GridProps } from './grid'\nimport { sum } from './utils'\n\nimport type { UnwrapRef } from 'vue'\nimport type {\n  DynamicSizeGridInstance,\n  GridDefaultSlotParams,\n  GridItemKeyGetter,\n  GridItemRenderedEvtParams,\n  GridScrollOptions,\n  ResetAfterIndex,\n  Alignment as ScrollStrategy,\n} from '@element-plus/components/virtual-list'\nimport type { TableV2HeaderInstance } from './components'\nimport type { TableV2GridProps } from './grid'\n\nconst COMPONENT_NAME = 'ElTableV2Grid'\n\nconst useTableGrid = (props: TableV2GridProps) => {\n  const headerRef = ref<TableV2HeaderInstance>()\n  const bodyRef = ref<DynamicSizeGridInstance>()\n  const scrollLeft = ref(0)\n\n  const totalHeight = computed(() => {\n    const { data, rowHeight, estimatedRowHeight } = props\n\n    if (estimatedRowHeight) {\n      return\n    }\n\n    return data.length * (rowHeight as number)\n  })\n\n  const fixedRowHeight = computed(() => {\n    const { fixedData, rowHeight } = props\n\n    return (fixedData?.length || 0) * (rowHeight as number)\n  })\n\n  const headerHeight = computed(() => sum(props.headerHeight))\n\n  const gridHeight = computed(() => {\n    const { height } = props\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight))\n  })\n\n  const hasHeader = computed(() => {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0\n  })\n\n  const itemKey: GridItemKeyGetter = ({ data, rowIndex }) =>\n    data[rowIndex][props.rowKey]\n\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd,\n  }: GridItemRenderedEvtParams) {\n    props.onRowsRendered?.({\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd,\n    })\n  }\n\n  function resetAfterRowIndex(index: number, forceUpdate: boolean) {\n    bodyRef.value?.resetAfterRowIndex(index, forceUpdate)\n  }\n\n  function scrollTo(x: number, y: number): void\n  function scrollTo(options: GridScrollOptions): void\n  function scrollTo(leftOrOptions: number | GridScrollOptions, top?: number) {\n    const header$ = unref(headerRef)\n    const body$ = unref(bodyRef)\n\n    if (isObject(leftOrOptions)) {\n      header$?.scrollToLeft(leftOrOptions.scrollLeft)\n      scrollLeft.value = leftOrOptions.scrollLeft!\n      body$?.scrollTo(leftOrOptions)\n    } else {\n      header$?.scrollToLeft(leftOrOptions)\n      scrollLeft.value = leftOrOptions\n      body$?.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top,\n      })\n    }\n  }\n\n  function scrollToTop(scrollTop: number) {\n    unref(bodyRef)?.scrollTo({\n      scrollTop,\n    })\n  }\n\n  function scrollToRow(row: number, strategy: ScrollStrategy) {\n    unref(bodyRef)?.scrollToItem(row, 1, strategy)\n  }\n\n  function forceUpdate() {\n    unref(bodyRef)?.$forceUpdate()\n    unref(headerRef)?.$forceUpdate()\n  }\n\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow,\n    scrollLeft,\n  }\n}\n\nconst TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup(props, { slots, expose }) {\n    const { ns } = inject(TableV2InjectionKey)!\n\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n      scrollLeft,\n    } = useTableGrid(props)\n\n    provide('tableV2GridScrollLeft', scrollLeft)\n\n    expose({\n      forceUpdate,\n      /**\n       * @description fetch total height\n       */\n      totalHeight,\n      /**\n       * @description scroll to a position\n       */\n      scrollTo,\n      /**\n       * @description scroll vertically to position y\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n      /**\n       * @description reset rendered state after row index\n       */\n      resetAfterRowIndex,\n    })\n\n    const getColumnWidth = () => props.bodyWidth\n\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n\n        getRowHeight,\n        onScroll,\n      } = props\n\n      const isDynamicRowEnabled = isNumber(estimatedRowHeight)\n      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid\n      const _headerHeight = unref(headerHeight)\n\n      return (\n        <div role=\"table\" class={[ns.e('table'), props.class]} style={style}>\n          <Grid\n            ref={bodyRef}\n            // special attrs\n            data={data}\n            useIsScrolling={useIsScrolling}\n            itemKey={itemKey}\n            // column attrs\n            columnCache={0}\n            columnWidth={isDynamicRowEnabled ? getColumnWidth : bodyWidth}\n            totalColumn={1}\n            // row attrs\n            totalRow={data.length}\n            rowCache={cache}\n            rowHeight={isDynamicRowEnabled ? getRowHeight : rowHeight}\n            // DOM attrs\n            width={width}\n            height={unref(gridHeight)}\n            class={ns.e('body')}\n            role=\"rowgroup\"\n            scrollbarStartGap={scrollbarStartGap}\n            scrollbarEndGap={scrollbarEndGap}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            // handlers\n            onScroll={onScroll}\n            onItemRendered={onItemRendered}\n            perfMode={false}\n          >\n            {{\n              default: (params: GridDefaultSlotParams) => {\n                const rowData = data[params.rowIndex]\n                return slots.row?.({\n                  ...params,\n                  columns,\n                  rowData,\n                })\n              },\n            }}\n          </Grid>\n          {unref(hasHeader) && (\n            <Header\n              ref={headerRef}\n              class={ns.e('header-wrapper')}\n              columns={columns}\n              headerData={data}\n              headerHeight={props.headerHeight}\n              fixedHeaderData={fixedData}\n              rowWidth={headerWidth}\n              rowHeight={rowHeight}\n              width={width}\n              height={Math.min(_headerHeight + unref(fixedRowHeight), height)}\n            >\n              {{\n                dynamic: slots.header,\n                fixed: slots.row,\n              }}\n            </Header>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableGrid\n\nexport type TableGridRowSlotParams = {\n  columns: TableV2GridProps['columns']\n  rowData: any\n} & GridDefaultSlotParams\n\nexport type TableGridInstance = InstanceType<typeof TableGrid> &\n  UnwrapRef<{\n    forceUpdate: () => void\n    /**\n     * @description fetch total height\n     */\n    totalHeight: number\n\n    /**\n     * @description scrollTo a position\n     * @param { number | ScrollToOptions } arg1\n     * @param { number } arg2\n     */\n    scrollTo(leftOrOptions: number | GridScrollOptions, top?: number): void\n\n    /**\n     * @description scroll vertically to position y\n     */\n    scrollToTop(scrollTop: number): void\n    /**\n     * @description scroll to a given row\n     * @params row {Number} which row to scroll to\n     * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n     */\n    scrollToRow(row: number, strategy: ScrollStrategy): void\n    /**\n     * @description reset rendered state after row index\n     * @param { number } rowIndex\n     * @param { boolean } forceUpdate\n     */\n    resetAfterRowIndex: ResetAfterIndex\n  }>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}