{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.set.difference.v2.js\";\nimport \"core-js/modules/es.set.intersection.v2.js\";\nimport \"core-js/modules/es.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/es.set.is-subset-of.v2.js\";\nimport \"core-js/modules/es.set.is-superset-of.v2.js\";\nimport \"core-js/modules/es.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/es.set.union.v2.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport { ref, computed, unref, watch } from 'vue';\nimport { isArray } from '@vue/shared';\nconst useData = (props, {\n  expandedRowKeys,\n  lastRenderedRowIndex,\n  resetAfterIndex\n}) => {\n  const depthMap = ref({});\n  const flattenedData = computed(() => {\n    const depths = {};\n    const {\n      data: data2,\n      rowKey\n    } = props;\n    const _expandedRowKeys = unref(expandedRowKeys);\n    if (!_expandedRowKeys || !_expandedRowKeys.length) return data2;\n    const array = [];\n    const keysSet = /* @__PURE__ */new Set();\n    _expandedRowKeys.forEach(x => keysSet.add(x));\n    let copy = data2.slice();\n    copy.forEach(x => depths[x[rowKey]] = 0);\n    while (copy.length > 0) {\n      const item = copy.shift();\n      array.push(item);\n      if (keysSet.has(item[rowKey]) && isArray(item.children) && item.children.length > 0) {\n        copy = [...item.children, ...copy];\n        item.children.forEach(child => depths[child[rowKey]] = depths[item[rowKey]] + 1);\n      }\n    }\n    depthMap.value = depths;\n    return array;\n  });\n  const data = computed(() => {\n    const {\n      data: data2,\n      expandColumnKey\n    } = props;\n    return expandColumnKey ? unref(flattenedData) : data2;\n  });\n  watch(data, (val, prev) => {\n    if (val !== prev) {\n      lastRenderedRowIndex.value = -1;\n      resetAfterIndex(0, true);\n    }\n  });\n  return {\n    data,\n    depthMap\n  };\n};\nexport { useData };","map":{"version":3,"names":["useData","props","expandedRowKeys","lastRenderedRowIndex","resetAfterIndex","depthMap","ref","flattenedData","computed","depths","data","data2","rowKey","_expandedRowKeys","unref","length","array","keysSet","Set","forEach","x","add","copy","slice","item","shift","push","has","isArray","children","child","value","expandColumnKey","watch","val","prev"],"sources":["../../../../../../../packages/components/table-v2/src/composables/use-data.ts"],"sourcesContent":["import { computed, ref, unref, watch } from 'vue'\nimport { isArray } from '@element-plus/utils'\n\nimport type { TableV2Props } from '../table'\nimport type { KeyType } from '../types'\nimport type { UseRowReturn } from './use-row'\n\ntype UseDataProps = {\n  expandedRowKeys: UseRowReturn['expandedRowKeys']\n  lastRenderedRowIndex: UseRowReturn['lastRenderedRowIndex']\n  resetAfterIndex: UseRowReturn['resetAfterIndex']\n}\n\nexport const useData = (\n  props: TableV2Props,\n  { expandedRowKeys, lastRenderedRowIndex, resetAfterIndex }: UseDataProps\n) => {\n  const depthMap = ref<Record<KeyType, number>>({})\n\n  const flattenedData = computed(() => {\n    const depths: Record<KeyType, number> = {}\n    const { data, rowKey } = props\n\n    const _expandedRowKeys = unref(expandedRowKeys)\n\n    if (!_expandedRowKeys || !_expandedRowKeys.length) return data\n\n    const array: any[] = []\n    const keysSet = new Set()\n    _expandedRowKeys.forEach((x) => keysSet.add(x))\n\n    let copy: any[] = data.slice()\n    copy.forEach((x) => (depths[x[rowKey]] = 0))\n    while (copy.length > 0) {\n      const item = copy.shift()!\n\n      array.push(item)\n      if (\n        keysSet.has(item[rowKey]) &&\n        isArray(item.children) &&\n        item.children.length > 0\n      ) {\n        copy = [...item.children, ...copy]\n        item.children.forEach(\n          (child: any) => (depths[child[rowKey]] = depths[item[rowKey]] + 1)\n        )\n      }\n    }\n\n    depthMap.value = depths\n    return array\n  })\n\n  const data = computed(() => {\n    const { data, expandColumnKey } = props\n    return expandColumnKey ? unref(flattenedData) : data\n  })\n\n  watch(data, (val, prev) => {\n    if (val !== prev) {\n      lastRenderedRowIndex.value = -1\n      resetAfterIndex(0, true)\n    }\n  })\n\n  return {\n    data,\n    depthMap,\n  }\n}\n\nexport type UseDataReturn = ReturnType<typeof useData>\n"],"mappings":";;;;;;;;;;;;AAEY,MAACA,OAAO,GAAGA,CAACC,KAAK,EAAE;EAAEC,eAAe;EAAEC,oBAAoB;EAAEC;AAAe,CAAE,KAAK;EAC5F,MAAMC,QAAQ,GAAGC,GAAG,CAAC,EAAE,CAAC;EACxB,MAAMC,aAAa,GAAGC,QAAQ,CAAC,MAAM;IACnC,MAAMC,MAAM,GAAG,EAAE;IACjB,MAAM;MAAEC,IAAI,EAAEC,KAAK;MAAEC;IAAM,CAAE,GAAGX,KAAK;IACrC,MAAMY,gBAAgB,GAAGC,KAAK,CAACZ,eAAe,CAAC;IAC/C,IAAI,CAACW,gBAAgB,IAAI,CAACA,gBAAgB,CAACE,MAAM,EAC/C,OAAOJ,KAAK;IACd,MAAMK,KAAK,GAAG,EAAE;IAChB,MAAMC,OAAO,kBAAmB,IAAIC,GAAG,EAAE;IACzCL,gBAAgB,CAACM,OAAO,CAAEC,CAAC,IAAKH,OAAO,CAACI,GAAG,CAACD,CAAC,CAAC,CAAC;IAC/C,IAAIE,IAAI,GAAGX,KAAK,CAACY,KAAK,EAAE;IACxBD,IAAI,CAACH,OAAO,CAAEC,CAAC,IAAKX,MAAM,CAACW,CAAC,CAACR,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;IAC1C,OAAOU,IAAI,CAACP,MAAM,GAAG,CAAC,EAAE;MACtB,MAAMS,IAAI,GAAGF,IAAI,CAACG,KAAK,EAAE;MACzBT,KAAK,CAACU,IAAI,CAACF,IAAI,CAAC;MAChB,IAAIP,OAAO,CAACU,GAAG,CAACH,IAAI,CAACZ,MAAM,CAAC,CAAC,IAAIgB,OAAO,CAACJ,IAAI,CAACK,QAAQ,CAAC,IAAIL,IAAI,CAACK,QAAQ,CAACd,MAAM,GAAG,CAAC,EAAE;QACnFO,IAAI,GAAG,CAAC,GAAGE,IAAI,CAACK,QAAQ,EAAE,GAAGP,IAAI,CAAC;QAClCE,IAAI,CAACK,QAAQ,CAACV,OAAO,CAAEW,KAAK,IAAKrB,MAAM,CAACqB,KAAK,CAAClB,MAAM,CAAC,CAAC,GAAGH,MAAM,CAACe,IAAI,CAACZ,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC;MAC1F;IACA;IACIP,QAAQ,CAAC0B,KAAK,GAAGtB,MAAM;IACvB,OAAOO,KAAK;EAChB,CAAG,CAAC;EACF,MAAMN,IAAI,GAAGF,QAAQ,CAAC,MAAM;IAC1B,MAAM;MAAEE,IAAI,EAAEC,KAAK;MAAEqB;IAAe,CAAE,GAAG/B,KAAK;IAC9C,OAAO+B,eAAe,GAAGlB,KAAK,CAACP,aAAa,CAAC,GAAGI,KAAK;EACzD,CAAG,CAAC;EACFsB,KAAK,CAACvB,IAAI,EAAE,CAACwB,GAAG,EAAEC,IAAI,KAAK;IACzB,IAAID,GAAG,KAAKC,IAAI,EAAE;MAChBhC,oBAAoB,CAAC4B,KAAK,GAAG,CAAC,CAAC;MAC/B3B,eAAe,CAAC,CAAC,EAAE,IAAI,CAAC;IAC9B;EACA,CAAG,CAAC;EACF,OAAO;IACLM,IAAI;IACJL;EACJ,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}